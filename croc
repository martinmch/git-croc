#!/usr/bin/env bash

readonly stages=(
    "applypatch-msg"
    "commit-msg"
    "fsmonitor-watchman"
    "post-update"
    "pre-applypatch"
    "pre-commit"
    "prepare-commit-msg"
    "pre-push"
    "pre-rebase"
    "pre-receive"
    "update"
    )
stage=$(basename "$0")
readonly stage

if [[ ! "${stages[*]}" =~ ${stage} ]]
then
    printf "%s: Hook called with invalid stage. " "${stage}"
    printf "See githooks(5) for valid stages.\n"
    exit 1
fi

# Ansi escape codes used for coloring output
readonly GREEN="\e[32m"
readonly RED="\e[31m"
readonly YELLOW="\e[1;33m"
readonly RESET="\e[0m"
# Array of dots used for padding
dotstring=$(printf '%0.1s' "."{1..80})
readonly dotstring
# Maximum length of line to be padded.
readonly padlength=79

# Prints a line like padded in the middle with dots e.g.:
# ${1}.............................................${2}
print_line () {
    declare -r name=$1
    declare -r status=$2
    declare -r color=$3

    printf '%s' "$name"
    printf '%*.*s' 0 $((padlength - ${#name} - ${#status} )) "$dotstring"
    printf '%b' "$color"
    printf '%s\n' "$status"
    printf '%b' "$RESET"
}

run_and_print () {
    local -r hookFileName="$1"
    local -r hookExePath="$2"
    shouldFail=false
    shift 2

    hookName="${hookFileName%.*}"
    if [ $TEST ]
    then
        hookName="$(basename "$@")"
        if [[ "$hookName" == *".fails" ]]; then
            shouldFail=true
        fi
    fi

    # To allow skipping of tests, we determine if the hook ends in
    # "*.skip"
    if [[ "$hookFileName" == *".skip" ]]
    then
        skippedTests=$((failedTests+1))
        print_line "$hookName" "SKIPPED" "$YELLOW"
        continue
    fi

    # To allow tests to fail, we determine if the hook ends  in
    # "*.fails"
    if [[ "$hookFileName" == *".fails" ]]
    then
        skippedTests=$((failedTests+1))
        print_line "$hookName" "SKIPPED" "$YELLOW"
        continue
    fi

    # Save the output for anyone interested.
    "$hookExePath" "$@" > "/tmp/${stage}-${hookName}" 2>&1
    retVal=$?
    if [ $retVal -gt 0 ] && [ "$shouldFail" = false ]
    then
        failedTests=$((failedTests+1))
        print_line "$hookName" "FAILED" "${RED}"
    else
        passedTests=$((passedTests+1))
        print_line "$hookName" "PASSED" "${GREEN}"
    fi
}

# We use this seemingly superfluous function to ensure, that the global
# ENV doesn't get polluted with all our variables.
main () {
    local passedTests=0
    local skippedTests=0
    local failedTests=0
    local -r stagedir="$(dirname "$0")"/"$stage".d

    # Remove old output files
    rm -rf -- "/tmp/${stage}-*"

    if [ ! -d "$stagedir" ]
    then
        1>&2 echo "$stage: cannot access '$(basename "$stagedir")': No such directory"
        exit 1
    fi

    if [ ! -r "$stagedir" ]
    then
        1>&2 echo "$stage: cannot access '$(basename "$stagedir")': Permission denied"
        exit 1
    fi

    if [ -z "$(ls -A "$stagedir")" ];
    then
        1>&2 echo "$stage: cannot traverse '$(basename "$stagedir")': Directory empty"
        exit 1
    fi

    for hook in "$stagedir"/*
    do
        # Ignore directories (tests)
        if [ -d "$hook" ]
        then
            continue
        fi

        if [ ! -f "$hook" ]
        then
            1>&2 echo "$stage: cannot access '$hook': No such file"
            continue
        fi

        hookFileName=$(basename "${hook}")

        if [ ! -x "$hook" ] || [ ! -r "$hook" ]
        then
            1>&2 echo "$stage: '$hookFileName': Permission denied"
            continue
        fi

        # To ensure readability of output, we impose a maximum length of
        # script names at 71 characters. This ensures room for "..FAILED"
        # after any test.
        if [ ! "${#hookFileName}" -lt 71 ]
        then
            failedTests=$((failedTests+1))
            1>&2 echo "$stage: '$hookFileName': File name too long"
            continue
        fi

        if [ $TEST ]
        then
            # When printing, we don't want to show the skip part of the
            # name. The extension is removed.
            printf 'Testing %s:\n' "${hookFileName%.*}"
            for testName in "$hook".tests/*
            do
                if [ ! -f "$testName" ]
                then
                    printf "no tests available\n"
                    continue
                fi
                run_and_print "$hookFileName" "$hook" "$testName"
            done
        else
            run_and_print "$hookFileName" "$hook" "$@"
        fi
    done

    declare -r totalTests=$((passedTests + failedTests + skippedTests))

    printf 'Passed: %s  ' "$passedTests"
    printf 'Failed: %s  ' "$failedTests"
    printf 'Skipped: %s  ' "$skippedTests"
    printf 'Total: %s\n' "$totalTests"

    if [ $VERBOSE ]
    then
        printf '\nOutput:\n'
        for hook in "$stagedir"/*
        do
            printf '%s:\n' ${hookName}
            cat "/tmp/${stage}-${hookName}" | sed 's/^/\t/'
        done
    fi

    exit $failedTests
}


if [[ "$@" =~ "--verbose" ]]
then
    VERBOSE=1
fi

if [[ "$@" =~ "--test" ]]
then
    TEST=1
fi

main "$@"
